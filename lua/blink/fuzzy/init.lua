-- Code generated by Rust Lua interface. DO NOT EDIT.

local ffi = require('ffi')

ffi.cdef([[
typedef struct {
    const uint32_t *ptr;
    size_t len;
    size_t capacity;
} blink_fuzzy__Vec_uint32_t;
typedef struct {
    const char * *ptr;
    size_t len;
    size_t capacity;
} blink_fuzzy__Vec___string_ptr;
int32_t fuzzy(
        const char *,
    const blink_fuzzy__Vec___string_ptr*,
    blink_fuzzy__Vec_uint32_t**);
int32_t __gc_fuzzy(
        blink_fuzzy__Vec_uint32_t*);
]])

local rust = ffi.load(debug.getinfo(1).source:match('@?(.*/)') .. '/target/release/libblink_fuzzy.so')

local M = {}

local __const_c_typename___string_ptr = ffi.typeof('const char *[?]')
local __c_function_argument___string_ptr = ffi.typeof('const char *[?]')
local __c_mut_function_argument___string_ptr = ffi.typeof('char *[?]')

local __const_c_typename_uint32_t = ffi.typeof('const uint32_t[?]')
local __c_function_argument_uint32_t = ffi.typeof('uint32_t[?]')
local __c_mut_function_argument_uint32_t = ffi.typeof('uint32_t[?]')

local __typename_Vec_uint32_t = ffi.metatype('blink_fuzzy__Vec_uint32_t', {})
local __const_c_typename_Vec_uint32_t = ffi.typeof('const blink_fuzzy__Vec_uint32_t[?]')
local __c_function_argument_Vec_uint32_t = ffi.typeof('const blink_fuzzy__Vec_uint32_t*[?]')
local __c_mut_function_argument_Vec_uint32_t = ffi.typeof('blink_fuzzy__Vec_uint32_t*[?]')

local __typename_Vec___string_ptr = ffi.metatype('blink_fuzzy__Vec___string_ptr', {})
local __const_c_typename_Vec___string_ptr = ffi.typeof('const blink_fuzzy__Vec___string_ptr[?]')
local __c_function_argument_Vec___string_ptr = ffi.typeof('const blink_fuzzy__Vec___string_ptr*[?]')
local __c_mut_function_argument_Vec___string_ptr = ffi.typeof('blink_fuzzy__Vec___string_ptr*[?]')

function M.fuzzy(prompt, items)
  local __typeof = __c_mut_function_argument_Vec_uint32_t
  local __ret_ptr = __typeof(1, {})
  local status = rust.fuzzy(
    (function(value) return value end)(prompt),
    (function(value)
      if type(value) == 'string' then
        return __typename_Vec___string_ptr(value, #value)
      else
        local f = function(value) return __const_c_typename___string_ptr(#value, value) end
        return __typename_Vec___string_ptr(f(value), #value, 0)
      end
    end)(items),
    __ret_ptr
  )
  if status ~= 0 then error('fuzzy failed with status ' .. status) end
  local __ret = __ret_ptr[0]
  ffi.gc(__ret, rust.__gc_fuzzy)
  local f = function(value)
    local ret = {}
    local len = tonumber(value.len)
    local f = function(value) return value end
    for i = 1, len do
      ret[i] = f(value.ptr[i - 1])
    end
    return ret
  end
  return f(__ret)
end

return M
