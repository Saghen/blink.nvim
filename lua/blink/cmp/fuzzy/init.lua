-- Code generated by Rust Lua interface. DO NOT EDIT.

    local ffi = require("ffi")

    ffi.cdef[[
    


typedef struct {
    const uint32_t *ptr;
    size_t len;
    size_t capacity;
} blink_fuzzy__Vec_uint32_t;
typedef struct {
    const char * *ptr;
    size_t len;
    size_t capacity;
} blink_fuzzy__Vec___string_ptr;


typedef struct {
    const int32_t *ptr;
    size_t len;
    size_t capacity;
} blink_fuzzy__Vec_int32_t;
int32_t fuzzy(
        const char *,
    const blink_fuzzy__Vec___string_ptr*,
    const blink_fuzzy__Vec_int32_t*,
    const blink_fuzzy__Vec___string_ptr*,
    uint32_t,
    blink_fuzzy__Vec_uint32_t**);
int32_t __gc_fuzzy(
        blink_fuzzy__Vec_uint32_t*);
int32_t access(
        const char *,
    int8_t*);
int32_t __gc_access(
        int8_t);
int32_t get_lines_words(
        const char *,
    blink_fuzzy__Vec___string_ptr**);
int32_t __gc_get_lines_words(
        blink_fuzzy__Vec___string_ptr*);

    ]]

    local rust = ffi.load(debug.getinfo(1).source:match('@?(.*/)') .. 'target/release/libblink_fuzzy.so')

    local M = {}

    

local __const_c_typename___string_ptr = ffi.typeof("const char *[?]")
local __c_function_argument___string_ptr = ffi.typeof("const char *[?]")
local __c_mut_function_argument___string_ptr = ffi.typeof("char *[?]")


local __const_c_typename_uint32_t = ffi.typeof("const uint32_t[?]")
local __c_function_argument_uint32_t = ffi.typeof("uint32_t[?]")
local __c_mut_function_argument_uint32_t = ffi.typeof("uint32_t[?]")


local __typename_Vec_uint32_t = ffi.metatype("blink_fuzzy__Vec_uint32_t", {})
local __const_c_typename_Vec_uint32_t = ffi.typeof("const blink_fuzzy__Vec_uint32_t[?]")
local __c_function_argument_Vec_uint32_t = ffi.typeof("const blink_fuzzy__Vec_uint32_t*[?]")
local __c_mut_function_argument_Vec_uint32_t = ffi.typeof("blink_fuzzy__Vec_uint32_t*[?]")


local __typename_Vec___string_ptr = ffi.metatype("blink_fuzzy__Vec___string_ptr", {})
local __const_c_typename_Vec___string_ptr = ffi.typeof("const blink_fuzzy__Vec___string_ptr[?]")
local __c_function_argument_Vec___string_ptr = ffi.typeof("const blink_fuzzy__Vec___string_ptr*[?]")
local __c_mut_function_argument_Vec___string_ptr = ffi.typeof("blink_fuzzy__Vec___string_ptr*[?]")


local __const_c_typename_bool = ffi.typeof("const int8_t[?]")
local __c_function_argument_bool = ffi.typeof("int8_t[?]")
local __c_mut_function_argument_bool = ffi.typeof("int8_t[?]")


local __const_c_typename_int32_t = ffi.typeof("const int32_t[?]")
local __c_function_argument_int32_t = ffi.typeof("int32_t[?]")
local __c_mut_function_argument_int32_t = ffi.typeof("int32_t[?]")


local __typename_Vec_int32_t = ffi.metatype("blink_fuzzy__Vec_int32_t", {})
local __const_c_typename_Vec_int32_t = ffi.typeof("const blink_fuzzy__Vec_int32_t[?]")
local __c_function_argument_Vec_int32_t = ffi.typeof("const blink_fuzzy__Vec_int32_t*[?]")
local __c_mut_function_argument_Vec_int32_t = ffi.typeof("blink_fuzzy__Vec_int32_t*[?]")

function M.fuzzy(
    needle,
    haystack,
    haystack_score_offsets,
    nearby_words,
    max_items)
    local __typeof = __c_mut_function_argument_Vec_uint32_t
    local __ret_ptr = __typeof(1, {})
    local status = rust.fuzzy(
        (function(value) return value end)(needle),
    (
function(value)
    if type(value) == "string" then
        return __typename_Vec___string_ptr(value, #value)
    else
        local f = function(value)
    return __const_c_typename___string_ptr(#value, value)
end
        return __typename_Vec___string_ptr(f(value), #value, 0)
    end
end
)(haystack),
    (
function(value)
    if type(value) == "string" then
        return __typename_Vec_int32_t(value, #value)
    else
        local f = function(value)
    return __const_c_typename_int32_t(#value, value)
end
        return __typename_Vec_int32_t(f(value), #value, 0)
    end
end
)(haystack_score_offsets),
    (
function(value)
    if type(value) == "string" then
        return __typename_Vec___string_ptr(value, #value)
    else
        local f = function(value)
    return __const_c_typename___string_ptr(#value, value)
end
        return __typename_Vec___string_ptr(f(value), #value, 0)
    end
end
)(nearby_words),
    (function(value) return value end)(max_items),
    __ret_ptr
    )
    if status ~= 0 then
        error("fuzzy failed with status "..status)
    end
    local __ret = __ret_ptr[0]
    ffi.gc(__ret, rust.__gc_fuzzy)
    local f = function(value)
    local ret = {}
    local len = tonumber(value.len)
    local f = function(value) return value end
    for i = 1,len do
        ret[i] = f(value.ptr[i - 1])
    end
    return ret
end
    return f(__ret)
end

function M.access(
    item)
    local __typeof = __c_mut_function_argument_bool
    local __ret_ptr = __typeof(1, {})
    local status = rust.access(
        (function(value) return value end)(item),
    __ret_ptr
    )
    if status ~= 0 then
        error("access failed with status "..status)
    end
    local __ret = __ret_ptr[0]
    
    local f = function(value) return value ~= 0 end
    return f(__ret)
end

function M.get_lines_words(
    lines)
    local __typeof = __c_mut_function_argument_Vec___string_ptr
    local __ret_ptr = __typeof(1, {})
    local status = rust.get_lines_words(
        (function(value) return value end)(lines),
    __ret_ptr
    )
    if status ~= 0 then
        error("get_lines_words failed with status "..status)
    end
    local __ret = __ret_ptr[0]
    ffi.gc(__ret, rust.__gc_get_lines_words)
    local f = function(value)
    local ret = {}
    local len = tonumber(value.len)
    local f = ffi.string
    for i = 1,len do
        ret[i] = f(value.ptr[i - 1])
    end
    return ret
end
    return f(__ret)
end


    return M
    
